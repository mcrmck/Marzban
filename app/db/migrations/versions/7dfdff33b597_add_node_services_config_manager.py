"""add node services config manager

Revision ID: 7dfdff33b597
Revises: 622a8ec95acb
Create Date: 2025-06-01 11:44:32.592181

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7dfdff33b597'
down_revision = '622a8ec95acb'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('node_service_configurations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('service_name', sa.String(length=255), nullable=False, comment="User-friendly name for this service, e.g., 'US-VLESS-WS-TLS'"),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('protocol_type', sa.Enum('VLESS', 'VMESS', 'TROJAN', 'SHADOWSOCKS', 'HTTP', 'SOCKS', name='protocol_type_enum'), nullable=False),
    sa.Column('listen_address', sa.String(length=255), nullable=True, comment='Listen IP on the node; null or 0.0.0.0 for all interfaces'),
    sa.Column('listen_port', sa.Integer(), nullable=False, comment='Listening port on the node for this service'),
    sa.Column('network_type', sa.Enum('TCP', 'KCP', 'WS', 'HTTP', 'GRPC', 'QUIC', name='network_type_enum'), nullable=True, comment='Network type for stream settings (ws, grpc, etc.)'),
    sa.Column('security_type', sa.Enum('NONE', 'TLS', 'REALITY', name='security_type_enum'), nullable=False, comment='Security for stream settings (tls, reality)'),
    sa.Column('ws_path', sa.String(length=255), nullable=True, comment='Path for WebSocket (e.g., /vless)'),
    sa.Column('grpc_service_name', sa.String(length=255), nullable=True, comment='Service name for gRPC'),
    sa.Column('http_upgrade_path', sa.String(length=255), nullable=True, comment='Path for HTTP/2 upgrade (if network_type is http)'),
    sa.Column('sni', sa.String(length=255), nullable=True, comment='Server Name Indication for TLS/REALITY'),
    sa.Column('fingerprint', sa.String(length=255), nullable=True, comment='uTLS fingerprint or REALITY fingerprint'),
    sa.Column('reality_short_id', sa.String(length=255), nullable=True, comment='REALITY short ID'),
    sa.Column('reality_public_key', sa.String(length=255), nullable=True, comment='REALITY public key'),
    sa.Column('advanced_protocol_settings', sa.JSON(), nullable=True, comment="JSON for Xray 'settings' object (protocol-specific, e.g., VLESS decryption, fallbacks)"),
    sa.Column('advanced_stream_settings', sa.JSON(), nullable=True, comment="JSON for Xray 'streamSettings' (e.g., tcpSettings, kcpSettings, QUIC params, specific ws/grpc headers)"),
    sa.Column('advanced_tls_settings', sa.JSON(), nullable=True, comment="JSON for Xray 'tlsSettings' (e.g., ALPN, custom certs if not panel-managed)"),
    sa.Column('advanced_reality_settings', sa.JSON(), nullable=True, comment="JSON for Xray 'realitySettings' (e.g., spiderX, advanced REALITY params)"),
    sa.Column('sniffing_settings', sa.JSON(), nullable=True, comment="JSON for Xray 'sniffing' object"),
    sa.Column('xray_inbound_tag', sa.String(length=255), nullable=True, comment='Internal Xray tag for this inbound; panel generates if null. Must be unique per node.'),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_node_service_configurations_id'), 'node_service_configurations', ['id'], unique=False)
    op.create_index(op.f('ix_node_service_configurations_service_name'), 'node_service_configurations', ['service_name'], unique=False)
    op.create_index(op.f('ix_node_service_configurations_xray_inbound_tag'), 'node_service_configurations', ['xray_inbound_tag'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_node_service_configurations_xray_inbound_tag'), table_name='node_service_configurations')
    op.drop_index(op.f('ix_node_service_configurations_service_name'), table_name='node_service_configurations')
    op.drop_index(op.f('ix_node_service_configurations_id'), table_name='node_service_configurations')
    op.drop_table('node_service_configurations')
    # ### end Alembic commands ###
