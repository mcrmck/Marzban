"""initial

Revision ID: f1e838995c42
Revises: None
Create Date: 2025-06-04 11:50:13.263694

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = 'f1e838995c42'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admins',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=34), nullable=True),
        sa.Column('hashed_password', sa.String(length=128), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('is_sudo', sa.Boolean(), nullable=True),
        sa.Column('password_reset_at', sa.DateTime(), nullable=True),
        sa.Column('telegram_id', sa.BigInteger(), nullable=True),
        sa.Column('discord_webhook', sa.String(length=1024), nullable=True),
        sa.Column('users_usage', sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_admins_username'), 'admins', ['username'], unique=True)

    op.create_table('admin_usage_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('admin_id', sa.Integer(), nullable=True),
        sa.Column('used_traffic_at_reset', sa.BigInteger(), nullable=False),
        sa.Column('reset_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['admin_id'], ['admins.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('account_number', sa.String(length=36), nullable=False),
        sa.Column('status', sa.Enum('active', 'expired', 'limited', 'disabled', name='userstatus'), nullable=False),
        sa.Column('used_traffic', sa.BigInteger(), nullable=True),
        sa.Column('data_limit', sa.BigInteger(), nullable=True),
        sa.Column('data_limit_reset_strategy', sa.Enum('no_reset', 'day', 'week', 'month', 'year', name='userdatalimitresetstrategy'), nullable=False),
        sa.Column('expire', sa.Integer(), nullable=True),
        sa.Column('sub_revoked_at', sa.DateTime(), nullable=True),
        sa.Column('sub_updated_at', sa.DateTime(), nullable=True),
        sa.Column('sub_last_user_agent', sa.String(length=512), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('note', sa.String(length=500), nullable=True),
        sa.Column('online_at', sa.DateTime(), nullable=True),
        sa.Column('on_hold_expire_duration', sa.BigInteger(), nullable=True),
        sa.Column('on_hold_timeout', sa.DateTime(), nullable=True),
        sa.Column('auto_delete_in_days', sa.Integer(), nullable=True),
        sa.Column('edit_at', sa.DateTime(), nullable=True),
        sa.Column('last_status_change', sa.DateTime(), nullable=True),
        sa.Column('active_node_id', sa.Integer(), nullable=True),
        sa.Column('email', sa.String(length=128), nullable=True),
        sa.Column('hashed_password', sa.String(length=128), nullable=True),
        sa.ForeignKeyConstraint(['active_node_id'], ['nodes.id'], name='fk_user_active_node'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_account_number'), 'users', ['account_number'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)

    op.create_table('next_plans',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('data_limit', sa.BigInteger(), nullable=False),
        sa.Column('expire', sa.Integer(), nullable=True),
        sa.Column('add_remaining_traffic', sa.Boolean(), nullable=False),
        sa.Column('fire_on_either', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('user_usage_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('used_traffic_at_reset', sa.BigInteger(), nullable=False),
        sa.Column('reset_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('proxies',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('type', sa.Enum('vmess', 'vless', 'trojan', 'shadowsocks', 'hysteria2', name='proxytypes'), nullable=False),
        sa.Column('settings', sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('system',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('uplink', sa.BigInteger(), nullable=True),
        sa.Column('downlink', sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('jwt',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('secret_key', sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('tls',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('key', sa.String(length=4096), nullable=False),
        sa.Column('certificate', sa.String(length=2048), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('nodes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=256, collation='NOCASE'), nullable=True),
        sa.Column('address', sa.String(length=256), nullable=False),
        sa.Column('port', sa.Integer(), nullable=False),
        sa.Column('api_port', sa.Integer(), nullable=False),
        sa.Column('xray_version', sa.String(length=32), nullable=True),
        sa.Column('status', sa.Enum('connecting', 'connected', 'error', 'disabled', name='nodestatus'), nullable=False),
        sa.Column('message', sa.String(length=1024), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('last_status_change', sa.DateTime(), nullable=True),
        sa.Column('uplink', sa.BigInteger(), nullable=True),
        sa.Column('downlink', sa.BigInteger(), nullable=True),
        sa.Column('usage_coefficient', sa.Float(), nullable=False),
        sa.Column('panel_client_cert_pem', sa.String(), nullable=True),
        sa.Column('panel_client_key_pem', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nodes_name'), 'nodes', ['name'], unique=True)

    op.create_table('node_user_usages',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('node_id', sa.Integer(), nullable=True),
        sa.Column('used_traffic', sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('created_at', 'user_id', 'node_id')
    )

    op.create_table('node_usages',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('node_id', sa.Integer(), nullable=True),
        sa.Column('uplink', sa.BigInteger(), nullable=True),
        sa.Column('downlink', sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('created_at', 'node_id')
    )

    op.create_table('notification_reminders',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('type', sa.Enum('expire', 'data', name='remindertype'), nullable=False),
        sa.Column('threshold', sa.Integer(), nullable=True),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('node_service_configurations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('node_id', sa.Integer(), nullable=False),
        sa.Column('service_name', sa.String(length=255), nullable=False),
        sa.Column('enabled', sa.Boolean(), nullable=False),
        sa.Column('protocol_type', sa.Enum('vmess', 'vless', 'trojan', 'shadowsocks', 'hysteria2', name='protocol_type_enum'), nullable=False),
        sa.Column('listen_address', sa.String(length=255), nullable=True),
        sa.Column('listen_port', sa.Integer(), nullable=False),
        sa.Column('network_type', sa.Enum('tcp', 'ws', 'grpc', 'http', 'quic', name='network_type_enum'), nullable=True),
        sa.Column('security_type', sa.Enum('none', 'tls', 'reality', name='security_type_enum'), nullable=False),
        sa.Column('ws_path', sa.String(length=255), nullable=True),
        sa.Column('grpc_service_name', sa.String(length=255), nullable=True),
        sa.Column('http_upgrade_path', sa.String(length=255), nullable=True),
        sa.Column('sni', sa.String(length=255), nullable=True),
        sa.Column('fingerprint', sa.String(length=255), nullable=True),
        sa.Column('reality_short_id', sa.String(length=255), nullable=True),
        sa.Column('reality_public_key', sa.String(length=255), nullable=True),
        sa.Column('advanced_protocol_settings', sa.JSON(), nullable=True),
        sa.Column('advanced_stream_settings', sa.JSON(), nullable=True),
        sa.Column('advanced_tls_settings', sa.JSON(), nullable=True),
        sa.Column('advanced_reality_settings', sa.JSON(), nullable=True),
        sa.Column('sniffing_settings', sa.JSON(), nullable=True),
        sa.Column('xray_inbound_tag', sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_node_service_configurations_service_name'), 'node_service_configurations', ['service_name'], unique=False)
    op.create_index(op.f('ix_node_service_configurations_xray_inbound_tag'), 'node_service_configurations', ['xray_inbound_tag'], unique=False)

    op.create_table('plans',
        sa.Column('id', sa.String(length=36), nullable=False),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('description', sa.String(length=1024), nullable=False),
        sa.Column('price', sa.Float(), nullable=False),
        sa.Column('duration_days', sa.Integer(), nullable=False),
        sa.Column('data_limit', sa.BigInteger(), nullable=True),
        sa.Column('stripe_price_id', sa.String(length=256), nullable=True),
        sa.Column('features', sa.JSON(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('plans')
    op.drop_index(op.f('ix_node_service_configurations_xray_inbound_tag'), table_name='node_service_configurations')
    op.drop_index(op.f('ix_node_service_configurations_service_name'), table_name='node_service_configurations')
    op.drop_table('node_service_configurations')
    op.drop_table('notification_reminders')
    op.drop_table('node_usages')
    op.drop_table('node_user_usages')
    op.drop_index(op.f('ix_nodes_name'), table_name='nodes')
    op.drop_table('nodes')
    op.drop_table('tls')
    op.drop_table('jwt')
    op.drop_table('system')
    op.drop_table('proxies')
    op.drop_table('user_usage_logs')
    op.drop_table('next_plans')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_account_number'), table_name='users')
    op.drop_table('users')
    op.drop_table('admin_usage_logs')
    op.drop_index(op.f('ix_admins_username'), table_name='admins')
    op.drop_table('admins')
    # ### end Alembic commands ###
